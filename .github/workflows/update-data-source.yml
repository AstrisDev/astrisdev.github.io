name: Update Data Source

on:
    workflow_dispatch:
        inputs:
            scrape_new:
                description: "Scrape new pages"
                required: false
                default: true
                type: boolean
            scrape_categories:
                description: "Update categories"
                required: false
                default: true
                type: boolean

jobs:
    update-data:
        runs-on: ubuntu-latest
            permissions:
      contents: write
      actions: write

        steps:
            - name: Check repository access
              run: |
                  if [ -z "${{ secrets.DATA_REPO_TOKEN }}" ]; then
                    echo "‚ùå DATA_REPO_TOKEN secret is not configured"
                    echo "GITHUB_TOKEN cannot write to other repositories"
                    echo "Please create a classic Personal Access Token with 'repo' scope"
                    echo "See DEPLOYMENT_SETUP.md for instructions"
                    exit 1
                  else
                    echo "‚úÖ DATA_REPO_TOKEN is configured"
                    echo "Repository owner: ${{ github.repository_owner }}"
                    echo "Target repository: ${{ github.repository_owner }}/russian-stamps"
                  fi

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.21"

            - name: Checkout tools
              uses: actions/checkout@v4
              with:
                  sparse-checkout: |
                      tools/
                  sparse-checkout-cone-mode: false

            - name: Checkout data fork
              uses: actions/checkout@v4
              with:
                  repository: ${{ github.repository_owner }}/russian-stamps
                  token: ${{ secrets.DATA_REPO_TOKEN }}
                  path: data-repo

            - name: Build scraper
              run: |
                  cd tools
                  CGO_ENABLED=0 go build -o sfscrape -buildvcs=false ./cmd/sfscrape

            - name: Run scraper
              run: |
                  cd data-repo

                  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ git
                  git config user.name "Stamps Data Bot"
                  git config user.email "stamps-bot@users.noreply.github.com"

                  # –§–ª–∞–≥–∏ –¥–ª—è —Å–∫—Ä–µ–π–ø–µ—Ä–∞
                  SCRAPE_FLAGS=""
                  if [ "${{ github.event.inputs.scrape_new }}" = "true" ] || [ "${{ github.event_name }}" = "schedule" ]; then
                    SCRAPE_FLAGS="$SCRAPE_FLAGS -n"
                  fi
                  if [ "${{ github.event.inputs.scrape_categories }}" = "true" ] || [ "${{ github.event_name }}" = "schedule" ]; then
                    SCRAPE_FLAGS="$SCRAPE_FLAGS -c"
                  fi

                  # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–µ–π–ø–µ—Ä–∞
                  if [ -n "$SCRAPE_FLAGS" ]; then
                    echo "Running sfscrape with flags: $SCRAPE_FLAGS"
                    ../tools/sfscrape $SCRAPE_FLAGS .
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    if git status --porcelain | grep -q .; then
                      echo "Changes detected, committing..."
                      git add .
                      git commit -m "ü§ñ Auto-update stamps data - $(date '+%Y-%m-%d %H:%M:%S UTC')"
                      git push origin main
                      
                      # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                      echo "DATA_UPDATED=true" >> $GITHUB_ENV
                    else
                      echo "No changes detected"
                      echo "DATA_UPDATED=false" >> $GITHUB_ENV
                    fi
                  fi

            - name: Check if data was updated
              run: |
                  echo "DATA_UPDATED value: '${{ env.DATA_UPDATED }}'"
                  if [ "${{ env.DATA_UPDATED }}" = "true" ]; then
                    echo "‚úÖ Data was updated, will trigger deployment"
                  else
                    echo "‚ÑπÔ∏è No data updates, skipping deployment trigger"
                  fi

            - name: Trigger deployment
              if: env.DATA_UPDATED == 'true'
              uses: actions/github-script@v7
              with:
                  script: |
                      console.log('üöÄ Attempting to trigger deployment...');
                      console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
                      
                      try {
                        const response = await github.rest.repos.createDispatchEvent({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          event_type: 'data-updated',
                          client_payload: {
                            source: 'data-update',
                            timestamp: new Date().toISOString()
                          }
                        });
                        console.log('‚úÖ Deployment triggered successfully!');
                        console.log('Response status:', response.status);
                      } catch (error) {
                        console.log('‚ö†Ô∏è Could not trigger deployment automatically');
                        console.log('Error:', error.message);
                        console.log('Status:', error.status);
                        console.log('üöÄ Please manually run "Deploy on Data Update" workflow');
                      }
