name: Update Data and Deploy

on:
    push:
        branches: [main]
    schedule:
        # Запускать каждые 6 часов для проверки обновлений
        - cron: "0 */6 * * *"
    workflow_dispatch:
        inputs:
            force_scrape:
                description: "Force scrape rusmarka.ru"
                required: false
                default: false
                type: boolean

jobs:
    update-and-deploy:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pages: write
            id-token: write

        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}

        steps:
            - name: Checkout main repo
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "18"
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.21"

            - name: Build tools
              run: |
                  cd tools
                  CGO_ENABLED=0 go build -o sfwatch -buildvcs=false ./cmd/sfwatch
                  CGO_ENABLED=0 go build -o sfscrape -buildvcs=false ./cmd/sfscrape

            - name: Build frontend
              run: |
                  cd frontend
                  npm ci
                  npm run build

                  - name: Initialize site directory
        run: |
            mkdir -p ./site-output
            # Первичная генерация сайта (это скачает и настроит данные)
            echo "Starting sfwatch initialization..."
            timeout 1800 ./tools/sfwatch -r ./site-output -f ./frontend/dist --update-period=30s --disable-rusmarka || {
              echo "Timeout reached or process completed"
            }

            # Проверяем что базовые данные загружены
            if [ ! -f "./site-output/repo/stamps.json" ]; then
              echo "ERROR: stamps.json not found, initialization failed"
              exit 1
            fi

            echo "Basic initialization completed"

                    - name: Run scraper if needed
        if: ${{ github.event.inputs.force_scrape == 'true' || github.event_name == 'schedule' }}
        run: |
          # Запускаем скрейпер для обновления данных
          if [ -f "./site-output/repo/stamps.json" ]; then
            echo "Running scraper to update data..."
            
            # Устанавливаем таймаут для скрейпера (максимум 20 минут)
            timeout 1200 ./tools/sfscrape -n -c ./site-output/repo || {
              echo "Scraper timeout or completed"
            }
            
            # Проверяем, были ли изменения
            if git -C ./site-output/repo status --porcelain | grep -q .; then
              echo "DATA_UPDATED=true" >> $GITHUB_ENV
              
              # Коммитим изменения в данные
              cd ./site-output/repo
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              git add .
              git commit -m "Auto-update stamps data $(date '+%Y-%m-%d %H:%M:%S')" || true
              
              echo "Data changes committed locally"
            else
              echo "DATA_UPDATED=false" >> $GITHUB_ENV
              echo "No data changes detected"
            fi
          fi

                    - name: Generate final site
        run: |
          # Финальная генерация сайта для деплоя
          echo "Generating final site..."
          
          # Запускаем sfwatch для генерации страниц (без скрейпинга rusmarka)
          timeout 300 ./tools/sfwatch -r ./site-output -f ./frontend/dist --update-period=30s --disable-rusmarka || {
            echo "Site generation timeout or completed"
          }
          
          # Проверяем что страницы сгенерированы
          if [ ! -d "./site-output/pages" ]; then
            echo "ERROR: pages directory not found"
            exit 1
          fi
          
          echo "Site generation completed"
          ls -la ./site-output/pages/

              - name: Setup Pages
                uses: actions/configure-pages@v4

              - name: Upload artifact
                uses: actions/upload-pages-artifact@v3
                with:
                    path: "./site-output/pages"

              - name: Deploy to GitHub Pages
                id: deployment
                uses: actions/deploy-pages@v4
