name: Quick Deploy (No Scraping)

on:
    workflow_dispatch:
    push:
        branches: [main]
        paths:
            - "frontend/**"
            - "tools/**"

jobs:
    quick-deploy:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pages: write
            id-token: write

        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "18"
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.21"

            - name: Build tools
              run: |
                  cd tools
                  CGO_ENABLED=0 go build -o sfwatch -buildvcs=false ./cmd/sfwatch

            - name: Build frontend
              run: |
                  cd frontend
                  npm ci
                  npm run build

                  - name: Generate site (quick mode)
        run: |
            mkdir -p ./site-output

            echo "Starting quick site generation..."

            # Запускаем sfwatch в фоне с отключенным rusmarka скрейпингом
            ./tools/sfwatch -r ./site-output -f ./frontend/dist --update-period=30s --disable-rusmarka &
            SFWATCH_PID=$!

            echo "Waiting for initial generation..."

            # Ждем пока создастся pages директория (максимум 5 минут)
            for i in {1..60}; do
              if [ -d "./site-output/pages" ] && [ "$(ls -A ./site-output/pages 2>/dev/null)" ]; then
                echo "Site generation completed successfully!"
                break
              fi
              echo "Waiting... (${i}/60)"
              sleep 5
            done

            # Останавливаем sfwatch
            kill $SFWATCH_PID 2>/dev/null || true
            wait $SFWATCH_PID 2>/dev/null || true

            # Проверяем результат
            if [ ! -d "./site-output/pages" ] || [ ! "$(ls -A ./site-output/pages 2>/dev/null)" ]; then
              echo "ERROR: Site generation failed or pages directory is empty"
              ls -la ./site-output/ || echo "site-output directory doesn't exist"
              exit 1
            fi

            echo "Quick deployment ready!"
            ls -la ./site-output/pages/

              - name: Setup Pages
                uses: actions/configure-pages@v4

              - name: Upload artifact
                uses: actions/upload-pages-artifact@v3
                with:
                    path: "./site-output/pages"

              - name: Deploy to GitHub Pages
                id: deployment
                uses: actions/deploy-pages@v4
